////////////////////////////////////////////////////////////////////////////////
//
//	Author: Sergio Alapont Granero (seralgrainf@gmail.com)
//	Date: 	2018/09/09
//	File: 	GfMaths.h
//
//	Copyright (c) 2018 (See README.md)
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __GFMATHS_H__
#define __GFMATHS_H__
////////////////////////////////////////////////////////////////////////////////
// Includes

#include "glm/glm.hpp"
#include "glm/gtx/euler_angles.hpp"
#include "glm/gtc/quaternion.hpp"
#include "GfCore/Common/GfTypes.h"

////////////////////////////////////////////////////////////////////////////////

typedef glm::vec2   v2;
typedef glm::vec3   v3;
typedef glm::vec4   v4;

typedef glm::mat3x3 m3;
typedef glm::mat4x4 m4;

using GfQuat = glm::quat;

////////////////////////////////////////////////////////////////////////////////
// Constants

#define GF_PI 3.14159265359f
#define GF_2PI (2.0f * GF_PI)
#define GF_PI2 (0.5f * GF_PI)
#define GF_PI4 (0.25f * GF_PI)

////////////////////////////////////////////////////////////////////////////////
// Units conversion

#define GF_DEG_TO_RAD(VAL) (VAL*(GF_PI / 180.0f))
#define GF_RAD_TO_DEG(VAL) (VAL*(180.0f / GF_PI))

////////////////////////////////////////////////////////////////////////////////
// Utility functions

template <typename T>
T GfClamp(T fVal, T fMin, T fMax)
{
	return fVal < fMin ? fMin : fVal > fMax ? fMax : fVal;
}

////////////////////////////////////////////////////////////////////////////////

template <typename T>
T GfLerp(T fFrom, T fTo, T fDelta)
{
	return fFrom + (fTo - fFrom) * fDelta;
}

////////////////////////////////////////////////////////////////////////////////

// Return a value within {fMin, fMax-1}
template <typename T>
T GfWrap(T fVal, T fMin, T fMax)
{
	T diff = fMax - fMin;
	return fVal < fMin ? (fVal + diff) : fVal >= fMax ? fVal - diff : fVal;
}

////////////////////////////////////////////////////////////////////////////////

template <typename T>
T GfSign(T fVal) { return a >= ((T)0) ? ((T)1) : ((T)-1); }

////////////////////////////////////////////////////////////////////////////////

template <typename T>
T GfMax(T fA, T fB) { return max(fA, fB); }

////////////////////////////////////////////////////////////////////////////////

template <typename T>
T GfMin(T fA, T fB) { return min(fA, fB); }

////////////////////////////////////////////////////////////////////////////////
#endif // __GFMATHS_H__
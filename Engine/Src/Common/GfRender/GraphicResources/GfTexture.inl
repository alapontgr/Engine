////////////////////////////////////////////////////////////////////////////////
//
//	Author: Sergio Alapont Granero (seralgrainf@gmail.com)
//	Date: 	2019/04/21
//	File: 	GfTexture.inl
//
//	Copyright (c) 2018 (See README.md)
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __GFTEXTURE_INL__
#define __GFTEXTURE_INL__
////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE u32 GfTexture::getMipMapCount() const
{
	return m_desc.m_mipCount;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE TextureFormat::Type GfTexture::getFormat() const
{
	return m_desc.m_format;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE bool GfTexture::isDepthBuffer() const
{
	return (m_desc.m_usage & TextureUsage::DepthStencil) != 0;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE bool GfTexture::isRT() const
{
	return (m_desc.m_usage & TextureUsage::RenderTarget) != 0;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE u32 GfTexture::getWidth() const
{
	return m_desc.m_width;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE u32 GfTexture::getHeight() const
{
	return m_desc.m_height;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE u32 GfTexture::getDepth() const
{
	return m_desc.m_depth;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE u32 GfTexture::getSlices() const
{
	return m_desc.m_slices;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE TextureType GfTexture::getTextureType() const
{
	return m_desc.m_textureType;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE TextureUsageMask GfTexture::getTextureUsage() const
{
	return m_desc.m_usage;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE bool GfTexture::getIsMappable() const
{
	return m_desc.m_mappable;
}

////////////////////////////////////////////////////////////////////////////////

GF_FORCEINLINE void GfTexture2D::LoadTexture2DDataFromStaging(const GfRenderContext& kCtx, const GfCmdBuffer& kCmdBuffer, const GfBuffer& kFrom, u32 uiBufferOffset)
{
	m_kPlatform.loadTexture2DDataFromStagingBufferRHI(kCtx, kCmdBuffer, kFrom, uiBufferOffset);
}

////////////////////////////////////////////////////////////////////////////////
#endif // __GFTEXTURE_INL__